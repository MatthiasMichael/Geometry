#include <iostream>
#include <vector>

//#include "rtcvImage.h"

#include "ConvexHull.h"

#include "commonTypes.h"
#include <random>


const std::vector<ImageVector> makePoints(float min, float max, int num)
{
	std::vector<ImageVector> points;
	std::random_device rd;  //Will be used to obtain a seed for the random number engine
	std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
	std::uniform_real_distribution<> dis(min, max);
	for (int n = 0; n < num; ++n) {
		//Use dis to transform the random unsigned int generated by gen into a double in [1, 2)
		points.push_back(make_named<ImageVector>(dis(gen), dis(gen)));
	}
	return points;
}


int main()
{
	const int size = 100;
	const int numTries = 20;

	//rtcvImage8U img(size, size);

	for (int t = 0; t < numTries; ++t)
	{
		const auto points = makePoints(0, size, 20);
		
		ConvexHull<ScalarType> hull(points);
		auto lines = hull.calcScanLines();

		//img.fill(10);

		for (const auto & l : lines)
		{
			for (int x = l.getStartX(); x < l.getEndX(); ++x)
			{
				///img.setValue(x, l.getY(), 60);
			}
		}

		const auto h = hull.getHull();

		for (int i = 0; i < h.size(); ++i)
		{
			int j = i == h.size() - 1 ? 0 : i + 1;
			/*img.drawLine(
				rtcvLine(
				rtcvPoint(
				static_cast<int>(h[i](0)),
				static_cast<int>(h[i](1))
			),
				rtcvPoint(
				static_cast<int>(h[j](0)),
				static_cast<int>(h[j](1))
			)
			), 128
			);*/
		}

		for (const auto & p : points)
		{
			//img.setValue(static_cast<int>(p(0)), static_cast<int>(p(1)), 255);
		}

		std::stringstream ss;
		ss << "C:/TEMP/hull_";
		ss.width(3);
		ss.fill('0');
		ss << t << ".pgm";
		//img.writeToFile(ss.str());
	}
	return 0;
}
